https://www.cnblogs.com/ToDoToTry/p/4095626.html
真正理解 git fetch, git pull 
要讲清楚git fetch，git pull,必须要附加讲清楚git remote，git merge 、远程repo， branch 、 commit-id 以及 FETCH_HEAD。
1. 【git remote】首先， git是一个分布式的结构，这意味着本地和远程是一个相对的名称。
	本地的repo仓库要与远程的repo配合完成版本对应必须要有 git remote子命令，
	通过git remote add来添加当前本地长度的远程repo， 
	有了这个动作本地的repo就知道了当遇到git push 的时候应该往哪里提交代码。
2. 【git branch】其次，git天生就是为了多版本分支管理而创造的，因此分支一说，
	不得不提， 分支就相当于是为了单独记录软件的某一个发布版本而存在的，既然git是分布式的，
	便有了本地分支和远程分支一说，git branch 可以查看本地分支， git branch -r  可以用来查看远程分支。 
	本地分支和远程分支在git push 的时候可以随意指定，交错对应，只要不出现版本从图即可。

3. 【git merge】再者，git的分布式结构也非常适合多人合作开发不同的功能模块，
	此时如果每个人都在其各自的分支上开发一个相对独立的模块的话，
	在每次release制作时都需先将各成员的模块做一个合并操作，用于合并各成员的工作成果，完成集成。 
	此时需要的就是git merge.

4.【git push 和 commit-id】在每次本地工作完成后，都会做一个git commit 操作来保存当前工作到本地的repo，
	 此时会产生一个commit-id，这是一个能唯一标识一个版本的序列号。 在使用git push后，这个序列号还会同步到远程repo。
	 
在理解了以上git要素之后，分析git fetch 和 git pull 就不再困难了。 
首先，git fetch 有四种基本用法

1. git fetch            →→ 这将更新git remote 中所有的远程repo 所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中

2. git fetch remote_repo         →→ 这将更新名称为remote_repo 的远程repo上的所有branch的最新commit-id，将其记录。 

3. git fetch remote_repo remote_branch_name        →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name

4. git fetch remote_repo remote_branch_name:local_branch_name       
	→→ 
	这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name ，
	并在本地创建local_branch_name 本地分支保存远端分支的所有数据。

 

FETCH_HEAD： 是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。

 

git pull 的运行过程：

git pull : 首先，基于本地的FETCH_HEAD记录，比对本地的FETCH_HEAD记录与远程仓库的版本号，然后git fetch 获得当前指向的远程分支的后续版本的数据，然后再利用git merge将其与本地的当前分支合并。



	git fetch origin master:tmp
	git diff tmp 
	git merge tmp

从远程获取最新的版本到本地的test分支上
之后再进行比较合并



	
	
	